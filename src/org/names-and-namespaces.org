#+TITLE: Names and Namespaces

#+TAGS: slide(s)

* Namespace Concepts
** Why Namespaces?                                                    :slide:
*** Re-use common names in different contexts
**** e.g. clojure.core/replace and clojure.string/replace
*** Separate application "layers" or "components"
*** Libraries
*** Separate "public API" and "internal implementation"

** Namespace-Qualified Vars                                           :slide:
#+begin_src clojure
  ;; In the namespace "foo.bar"
  (defn hello [] (println "Hello, World!"))

  ;; In another namespace
  (foo.bar/hello)   ; namespace-qualified
#+end_src
** Namespace Operations                                               :slide:
*** Load: find source on classpath & eval it
*** Alias: make shorter name for namespace-qualified symbols
*** Refer: copy symbol bindings from another namespace into current namespace
*** Import: make Java class names available in current namespace

* =ns= macro
** =ns= Declaration                                                   :slide:
*** Creates namespace and loads, aliases what you need
**** At top of file
*** Refers all of =clojure.core=
*** Imports all of =java.lang=

#+begin_src clojure
  ;; in file foo/bar/baz_quux.clj
  (ns foo.bar.baz-quux)
#+end_src
** =require=                                                          :slide:
*** Loads the namespace if not already loaded
**** Argument is a symbol, must be quoted
*** Have to refer to things with fully-qualified names

#+begin_src clojure
  (ns my-ns
    (:require clojure.set))
  ;;=> nil

  (clojure.set/union #{1 2} #{2 3 4})
  ;;=> #{1 2 3 4}
#+end_src

** =require :as=                                                      :slide:
*** Loads the namespace if not already loaded
**** Argument is a vector, must be quoted
*** Aliases the namespace to alternate name

#+begin_src clojure
  (ns my-ns
    (:require [clojure.set :as set]))
  ;;=> nil

  ;; "set" is an alias for "clojure.set"
  (set/union #{1 2} #{2 3 4})
  ;;=> #{1 2 3 4}
#+end_src

** =use=                                                              :slide:
*** Loads the namespace if not already loaded
**** Argument is a symbol, must be quoted
*** Refers all symbols into current namespace
*** Warns when symbols clash

** =use= Example                                                      :slide:
#+begin_src clojure
  (ns my-ns
    (:use clojure.string))
  ;; WARNING: reverse already refers
  ;; to: #'clojure.core/reverse in
  ;; namespace: user, being reversed
  ;; by: #'clojure.string/reverse
  ;; ...
  ;;=> nil
  
  (reverse "hello")
  ;;=> "olleh"
#+end_src

** =use :only=                                                        :slide:
*** Loads the namespace if not already loaded
**** Argument is a vector, must be quoted
*** Refers only specified symbols into current namespace

#+begin_src clojure
  (ns my-ns
    (:use [clojure.string :only (join)]))
  ;;=> nil
  (join "," [1 2 3])
  ;;=> "1,2,3"
#+end_src

** =import=                                                           :slide:
*** Makes Java classes available w/o package prefix in current namespace
**** Argument is a list, quoting is optional
*** Does not support aliases/renaming
*** Does not support Java's =import *=

#+begin_src clojure
  (ns my-ns
    (:import (java.io FileReader File))
  ;;=> nil
  (FileReader. (File. "readme.txt"))
  ;;=> #<FileReader ...>
#+end_src

** =ns= Complete Example                                              :slide:
#+begin_src clojure
  (ns name
    (:require [some.ns.foo :as foo]
              [other.ns.bar :as bar])
    (:use [this.ns.baz :only (a b c)]
          [that.ns.quux :only (d e f)])
    (:import (java.io File FileWriter)
             (java.net URL URI)))
#+end_src


** Namespaces and Files                                               :slide:
*** For require/use to work, have to find code defining namespace
*** Clojure converts namespace name to path and looks on CLASSPATH
**** Dots in namespace name become /
**** Hyphens become underscores
*** Idiomatic to define namespace per file

** Namespaces in the REPL                                             :slide:
*** =in-ns= switches to namespace
**** Creates namespace if it doesn't exist
*** Argument is a symbol, must be quoted
*** REPL always starts in namespace "user"

#+begin_src clojure
  user=> (in-ns 'foo.bar.baz)
  ;;=> nil
  foo.bar.baz=>
#+end_src

