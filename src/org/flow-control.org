#+TITLE: Flow Control
#+TAGS: slide(s)
#+COMMENT many of these covered in special ops/forms (A:78-80,296,297,306)

* Introduction
** Expressions in Clojure                                             :slide:
*** Everything in Clojure is an expression
**** Always returns a value
**** A block of multiple expressions returns the last value
***** E.g., =let=, =do=, =fn=
**** Expressions exclusively for side-effects return =nil=
** Flow Control Expressions                                           :slide:
*** Flow control operators are expressions too
*** Composable, can use them anywhere
**** Less duplicate code
**** Fewer intermediate variables
** Truthiness                                                         :slide:
#+begin_src clojure
  (if true :truthy :falsey)
  ;;=> :truthy
  (if (Object.) :truthy :falsey) ; objects are true
  ;;=> :truthy
  (if [] :truthy :falsey) ; empty collections are true
  ;;=> :truthy

  (if false :truthy :falsey)
  ;;=> :falsey
  (if nil :truthy :falsey) ; nil is false
  ;;=> :falsey
  (if (seq []) :truthy :falsey) ; seq on empty coll is nil
  ;;=> :falsey
#+end_src
** if                                                                 :slide:
#+begin_src clojure
  (str "2 is " (if (even? 2) "even" "odd"))
  ;;=> "2 is even"

  ; else-expression is optional
  (if (true? false) "impossible!")
  ;;=> nil
#+end_src
** if/do                                                              :slide:
*** Multiple expressions per branch
*** Last value in branch returned
#+begin_src clojure
  (if (even? 5)
    (do (println "even")
        true)
    (do (println "odd")
        false)) ;=> false
  ;; odd
#+end_src
** cond                                                               :slide:
*** Series of tests and expressions
*** =:else= expression is optional
#+begin_src clojure
  (cond
   test1 expression1
   test2 expression2
   ...
   :else else-expression)
#+end_src
** cond                                                               :slide:
#+begin_src clojure
  (let [x 5]
    (cond
     (< x 2) "x is less than 2"
     (< x 10) "x is less than 10"))
  ;;=> "x is less than 10"
#+end_src
** cond with :else                                                    :slide:
#+begin_src clojure
  (let [x 11]
    (cond
     (< x 2) "x is less than 2"
     (< x 10) "x is less than 10"
     :else "x is greater than or equal to 10"))
  ;;=> "x is greater than or equal to 10"
#+end_src
* Flow Control Exercise
** Exercise: Improve Your Greeting Again                              :slide:
*** Go back to your greeting code. It is kind of a complex mess. Use flow control to make it awesome.
** Exercise: One Greeting Solution                                    :slide:
#+begin_src clojure
    (defn messenger [greeting & whos]
      (let [x (count whos)]
        (apply str greeting ", "
               (cond
                 (= x 0) ["!"]
                 (< x 3) (conj (vec (interpose " and " whos)) "!")
                 :else 
                   (concat (vec (interpose ", " (butlast whos))) 
                           [", and " (last whos) "!"])))))
#+end_src clojure
* Iteration
** Recursion and Iteration                                            :slide:
*** Clojure provides =loop= and the sequence abstraction
*** =loop= is "classic" recursion
**** Closed to consumers, lower-level
*** Sequences represent iteration as values
**** Consumers can partially iterate
** doseq                                                              :slide:
*** Iterates over a sequence
**** Similar to Java's foreach loop
*** If a lazy sequence, =doseq= forces evaluation
#+begin_src clojure
  (doseq [n (range 3)]
    (println n))
  ;; 0
  ;; 1
  ;; 2
  ;;=> nil
#+end_src
** =doseq= with multiple bindings                                     :slide:
*** Similar to nested foreach loops
*** Processes all permutations of sequence content
** dotimes                                                            :slide:
*** Evaluate expression n times
#+begin_src clojure
  (dotimes [i 3]
    (println i))
  ;; 0
  ;; 1
  ;; 2
  ;;=> nil
#+end_src
** while                                                              :slide:
*** Evaluate expression while condition is true
#+begin_src clojure
  (while (.accept socket)
    (handle socket))
#+end_src
** Clojure's for                                                      :slide:
*** List comprehension, NOT a for-loop
*** Generator function for sequence permutation
#+begin_src clojure
  (for [x [0 1]
        y [0 1]]
    [x y])
  ;;=> ([0 0] [0 1] [1 0] [1 1]) ; seq
#+end_src
** with-open                                                          :slide:
*** JDK7 introduces try-with-resources
*** Clojure provides =with-open= for similar purposes
#+begin_src clojure
  (require '[clojure.java.io :as io])
  (with-open [f (io/writer "/tmp/new")]
    (.write f "some text"))
#+end_src
